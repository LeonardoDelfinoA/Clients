package io.github.LeonardoDelfinoA.rest;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import io.github.LeonardoDelfinoA.model.Client;
import io.github.LeonardoDelfinoA.model.ServiceProvided;
import io.github.LeonardoDelfinoA.repositories.ClientRepository;
import io.github.LeonardoDelfinoA.repositories.ServiceProvidedRepository;
import io.github.LeonardoDelfinoA.rest.dto.ServiceProvidedDTO;
import io.github.LeonardoDelfinoA.util.BigDecimalConverter;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/servicos-prestados")
@RequiredArgsConstructor
public class ServiceProvidedController {
	
	private final ClientRepository clientRepository;
	private final ServiceProvidedRepository serviceProvidedRepository;
	private final BigDecimalConverter bigDecimalConverter;
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	@CrossOrigin(origins = "http://localhost:4200")
	public ServiceProvided save(@RequestBody ServiceProvidedDTO dto) {
		LocalDate date = LocalDate.parse(dto.getDate(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		Integer idClient = dto.getIdClient();
		
		Client client = clientRepository
									.findById(idClient)
									.orElseThrow(() ->
											new ResponseStatusException(
													HttpStatus.BAD_REQUEST, "Cliente inexistente."));
		
		ServiceProvided serviceProvided = new ServiceProvided();
		serviceProvided.setDescription(dto.getDescription());
		serviceProvided.setDate( date );
		serviceProvided.setClient(client);
		serviceProvided.setValue( bigDecimalConverter.converter(dto.getPrice()));
		
		return serviceProvidedRepository.save(serviceProvided);
	}
	
	
	@GetMapping
	public List<ServiceProvided> search(
			@RequestParam(value = "name", required = false, defaultValue = "") String name,
			@RequestParam(value = "month", required = false) Integer month
		){
		
		return serviceProvidedRepository.findByClientNameAndMonth("%" + name + "%", month);
		
	}
}
